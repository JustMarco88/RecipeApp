import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { trpc } from "@/utils/trpc"
import { Timer as TimerIcon, ChevronLeft, ChevronRight, Play, Pause, X, Minus, Plus } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { type Recipe, type RecipeIngredient } from "@/types/recipe"

// TODO: In the future, replace these static timers with dynamic ones generated by LLM
// The LLM will analyze the recipe instructions and suggest relevant timers based on:
// 1. Cooking steps and methods mentioned
// 2. Specific ingredients and their cooking times
// 3. Common timing patterns in similar recipes
const QUICK_TIMERS = [
  { duration: 5 },
  { duration: 10 },
  { duration: 20 },
] as const

interface Timer {
  id: string
  name: string
  duration: number
  timeLeft: number
  isRunning: boolean
}

interface CookingViewProps {
  recipeId: string
  onClose: () => void
}

export function CookingView({ recipeId, onClose }: CookingViewProps) {
  const { data: recipe, isLoading, error } = trpc.recipe.getById.useQuery(recipeId)
  const [currentStep, setCurrentStep] = useState(0)
  const [servingMultiplier, setServingMultiplier] = useState(1)
  const [timers, setTimers] = useState<Timer[]>([])
  const [newTimerName, setNewTimerName] = useState("")
  const [newTimerDuration, setNewTimerDuration] = useState(5)
  const [startTime] = useState<Date>(new Date())
  const [ingredients, setIngredients] = useState<RecipeIngredient[]>([])
  const [instructions, setInstructions] = useState<string[]>([])
  const { toast } = useToast()
  const utils = trpc.useContext()

  const recordCooking = trpc.recipe.recordCooking.useMutation({
    onSuccess: () => {
      utils.recipe.getCookingHistory.invalidate()
      toast({
        title: "Success",
        description: "Cooking session recorded successfully!",
      })
      onClose()
    },
    onError: (error) => {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to record cooking session",
      })
    },
  })

  useEffect(() => {
    if (recipe) {
      try {
        // Parse ingredients
        let parsedIngredients: RecipeIngredient[] = []
        try {
          const ingredientsData = recipe.ingredients
          console.log('Raw ingredients data:', ingredientsData)
          const parsedData = JSON.parse(ingredientsData)
          console.log('Parsed ingredients data:', parsedData)

          if (!Array.isArray(parsedData)) {
            throw new Error('Ingredients data is not an array')
          }

          parsedIngredients = parsedData.map(ing => {
            if (!ing || typeof ing !== 'object') {
              throw new Error('Invalid ingredient format')
            }

            return {
              name: String(ing.name || ''),
              amount: Number(ing.amount || 0),
              unit: String(ing.unit || ''),
              checked: false,
            }
          })
        } catch (e) {
          console.error('Error parsing ingredients:', e)
          throw new Error(`Invalid ingredients format: ${e instanceof Error ? e.message : 'unknown error'}`)
        }
        setIngredients(parsedIngredients)

        // Parse instructions
        let parsedInstructions: string[] = []
        try {
          const instructionsData = recipe.instructions
          console.log('Raw instructions data:', instructionsData)
          const parsedData = JSON.parse(instructionsData)
          console.log('Parsed instructions data:', parsedData)

          if (!Array.isArray(parsedData)) {
            throw new Error('Instructions data is not an array')
          }

          parsedInstructions = parsedData.map(inst => {
            if (typeof inst !== 'string') {
              throw new Error('Invalid instruction format')
            }
            return inst
          })
        } catch (e) {
          console.error('Error parsing instructions:', e)
          throw new Error(`Invalid instructions format: ${e instanceof Error ? e.message : 'unknown error'}`)
        }
        setInstructions(parsedInstructions)
      } catch (error) {
        console.error('Error parsing recipe data:', error)
        toast({
          variant: "destructive",
          title: "Error",
          description: error instanceof Error ? error.message : "Failed to parse recipe data",
        })
      }
    }
  }, [recipe, toast])

  useEffect(() => {
    const timerInterval = setInterval(() => {
      setTimers(prevTimers =>
        prevTimers.map(timer => {
          if (timer.isRunning && timer.timeLeft > 0) {
            const newTimeLeft = timer.timeLeft - 1
            if (newTimeLeft === 0) {
              toast({
                title: "Timer Complete",
                description: `${timer.name} is done!`,
              })
            }
            return { ...timer, timeLeft: newTimeLeft }
          }
          return timer
        })
      )
    }, 1000)

    return () => clearInterval(timerInterval)
  }, [toast])

  const addTimer = () => {
    if (newTimerDuration <= 0) {
      toast({
        variant: "destructive",
        title: "Invalid Duration",
        description: "Timer duration must be greater than 0",
      })
      return
    }

    const timerName = newTimerName.trim() || `${newTimerDuration} min timer`
    const newTimer: Timer = {
      id: Math.random().toString(36).substr(2, 9),
      name: timerName,
      duration: newTimerDuration * 60,
      timeLeft: newTimerDuration * 60,
      isRunning: true,
    }
    setTimers(prev => [...prev, newTimer])
    setNewTimerName("")
    setNewTimerDuration(5)
  }

  const toggleTimer = (id: string) => {
    setTimers(prev =>
      prev.map(timer =>
        timer.id === id ? { ...timer, isRunning: !timer.isRunning } : timer
      )
    )
  }

  const removeTimer = (id: string) => {
    setTimers(prev => prev.filter(timer => timer.id !== id))
  }

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`
  }

  const toggleIngredient = (index: number) => {
    setIngredients(prev =>
      prev.map((ing, i) =>
        i === index ? { ...ing, checked: !ing.checked } : ing
      )
    )
  }

  const adjustServings = (increment: boolean) => {
    setServingMultiplier(prev => {
      const newValue = increment ? prev + 0.5 : prev - 0.5
      return Math.max(0.5, newValue)
    })
  }

  const finishCooking = async () => {
    if (!recipe) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Recipe not found",
      })
      return
    }

    try {
      const completedAt = new Date()
      const actualTime = Math.round((completedAt.getTime() - startTime.getTime()) / 60000)

      await recordCooking.mutateAsync({
        recipeId,
        startedAt: startTime,
        completedAt,
        actualTime,
        servingsCooked: Math.round(recipe.servings * servingMultiplier),
      })
    } catch (error) {
      console.error('Error recording cooking session:', error)
      toast({
        variant: "destructive",
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to record cooking session",
      })
    }
  }

  if (error) {
    return (
      <div className="fixed inset-0 bg-background z-50 flex items-center justify-center">
        <div className="text-center space-y-4">
          <h2 className="text-2xl font-bold text-destructive">Error Loading Recipe</h2>
          <p className="text-muted-foreground">{error.message}</p>
          <Button onClick={onClose}>Go Back</Button>
        </div>
      </div>
    )
  }

  if (isLoading || !recipe) {
    return (
      <div className="fixed inset-0 bg-background z-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4"></div>
          <p>Loading recipe...</p>
        </div>
      </div>
    )
  }

  const scaledIngredients = ingredients.map(ing => ({
    ...ing,
    amount: ing.amount * servingMultiplier,
  }))

  return (
    <div className="fixed inset-0 bg-background z-50 overflow-auto">
      <div className="container mx-auto p-4 max-w-6xl">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">{recipe.title}</h1>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-6 w-6" />
          </Button>
        </div>

        <div className="grid lg:grid-cols-[350px,1fr] gap-8">
          <div className="space-y-6">
            <div className="bg-card rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Ingredients</h2>
              <div className="mb-6">
                <label className="block text-sm mb-2">Servings</label>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => adjustServings(false)}
                    disabled={servingMultiplier <= 0.5}
                  >
                    <Minus className="h-4 w-4" />
                  </Button>
                  <div className="flex-1 text-center">
                    <span className="text-2xl font-semibold">
                      {Math.round(recipe.servings * servingMultiplier)}
                    </span>
                    <span className="text-sm text-muted-foreground ml-2">
                      (Original: {recipe.servings})
                    </span>
                  </div>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => adjustServings(true)}
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <ul className="space-y-3">
                {scaledIngredients.map((ing, index) => (
                  <li
                    key={index}
                    className="flex items-center gap-3 p-2 rounded hover:bg-muted/50 transition-colors"
                  >
                    <input
                      type="checkbox"
                      checked={ing.checked}
                      onChange={() => toggleIngredient(index)}
                      className="h-5 w-5"
                    />
                    <span className={ing.checked ? "line-through text-muted-foreground" : ""}>
                      {ing.amount.toFixed(1)} {ing.unit} {ing.name}
                    </span>
                  </li>
                ))}
              </ul>
            </div>

            <div className="bg-card rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Timers</h2>
              <div className="space-y-4">
                <div className="flex gap-2 mb-4">
                  {QUICK_TIMERS.map((timer) => (
                    <Button
                      key={timer.duration}
                      variant="outline"
                      onClick={() => {
                        const newTimer: Timer = {
                          id: Math.random().toString(36).substr(2, 9),
                          name: `${timer.duration} min timer`,
                          duration: timer.duration * 60,
                          timeLeft: timer.duration * 60,
                          isRunning: true,
                        }
                        setTimers(prev => [...prev, newTimer])
                        toast({
                          title: "Timer Added",
                          description: `Added ${timer.duration} minute timer`,
                        })
                      }}
                    >
                      {timer.duration} min
                    </Button>
                  ))}
                </div>
                <div className="grid grid-cols-[1fr,auto] gap-2">
                  <div className="space-y-2">
                    <Input
                      placeholder="Timer name"
                      value={newTimerName}
                      onChange={(e) => setNewTimerName(e.target.value)}
                    />
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => setNewTimerDuration(prev => Math.max(1, prev - 1))}
                        disabled={newTimerDuration <= 1}
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                      <div className="flex-1 text-center">
                        <span className="text-2xl font-semibold">
                          {newTimerDuration}
                        </span>
                        <span className="text-sm text-muted-foreground ml-2">
                          minutes
                        </span>
                      </div>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => setNewTimerDuration(prev => prev + 1)}
                      >
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                  <Button onClick={addTimer} className="h-full">
                    <TimerIcon className="h-4 w-4 mr-2" />
                    Add
                  </Button>
                </div>
                <div className="space-y-2">
                  {timers.map((timer) => (
                    <div
                      key={timer.id}
                      className="flex items-center justify-between bg-muted p-3 rounded-lg"
                    >
                      <div className="flex flex-col">
                        <span className="font-medium">{timer.name}</span>
                        <span className="text-sm text-muted-foreground">
                          {formatTime(timer.timeLeft)}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => toggleTimer(timer.id)}
                        >
                          {timer.isRunning ? (
                            <Pause className="h-4 w-4" />
                          ) : (
                            <Play className="h-4 w-4" />
                          )}
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => removeTimer(timer.id)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <div className="space-y-6">
            <div className="bg-card rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Instructions</h2>
              <div className="space-y-8">
                {instructions.map((step, index) => (
                  <div
                    key={index}
                    className={`p-4 rounded transition-colors ${
                      index === currentStep ? "bg-primary/10" : "hover:bg-muted/50"
                    }`}
                  >
                    <div className="flex items-start gap-4">
                      <span className="font-mono text-lg font-bold">
                        {index + 1}
                      </span>
                      <p className="flex-1">{step}</p>
                    </div>
                  </div>
                ))}
              </div>
              <div className="flex justify-between mt-8">
                <Button
                  variant="outline"
                  onClick={() => setCurrentStep((prev) => Math.max(0, prev - 1))}
                  disabled={currentStep === 0}
                >
                  <ChevronLeft className="h-4 w-4 mr-2" />
                  Previous
                </Button>
                {currentStep === instructions.length - 1 ? (
                  <Button onClick={finishCooking}>
                    Finish Cooking
                  </Button>
                ) : (
                  <Button
                    onClick={() =>
                      setCurrentStep((prev) =>
                        Math.min(instructions.length - 1, prev + 1)
                      )
                    }
                  >
                    Next
                    <ChevronRight className="h-4 w-4 ml-2" />
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 
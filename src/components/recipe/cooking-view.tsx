import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { trpc } from "@/utils/trpc"
import { Timer as TimerIcon, ChevronLeft, ChevronRight, Play, Pause, X, Minus, Plus, Clock, Flame, GaugeCircle, PencilLine, Check, History as HistoryIcon, ChevronDown, ChevronUp, Save, Loader2 } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { type Recipe, type RecipeIngredient, type CookingHistory } from "@prisma/client"
import { formatDistanceToNow, format } from "date-fns"

// TODO: In the future, replace these static timers with dynamic ones generated by LLM
// The LLM will analyze the recipe instructions and suggest relevant timers based on:
// 1. Cooking steps and methods mentioned
// 2. Specific ingredients and their cooking times
// 3. Common timing patterns in similar recipes
const QUICK_TIMERS = [
  { duration: 1 },
  { duration: 5 },
  { duration: 10 },
  { duration: 15 },
  { duration: 30 },
] as const

interface Timer {
  id: string
  name: string
  duration: number
  timeLeft: number
  isRunning: boolean
}

interface QuickAdjustment {
  type: 'ingredient' | 'instruction';
  index: number;
  originalValue: string;
  adjustedValue: string;
}

interface CookingViewProps {
  recipeId: string
  onClose: () => void
}

export function CookingView({ recipeId, onClose }: CookingViewProps) {
  const { data: recipe, isLoading, error } = trpc.recipe.getById.useQuery(recipeId)
  const { data: cookingHistory = [] } = trpc.recipe.getCookingHistory.useQuery(
    recipeId,
    {
      enabled: !!recipeId,
    }
  )
  const { data: currentSession } = trpc.recipe.getCurrentCookingSession.useQuery(
    { recipeId },
    {
      enabled: !!recipeId,
      onSuccess: (data) => {
        if (data?.notes) {
          setCookingNotes(data.notes);
        }
      },
    }
  )

  const [currentStep, setCurrentStep] = useState(0)
  const [servingMultiplier, setServingMultiplier] = useState(1)
  const [timers, setTimers] = useState<Timer[]>([])
  const [newTimerName, setNewTimerName] = useState("")
  const [newTimerDuration, setNewTimerDuration] = useState(5)
  const [startTime] = useState<Date>(new Date())
  const [ingredients, setIngredients] = useState<RecipeIngredient[]>([])
  const [instructions, setInstructions] = useState<string[]>([])
  const { toast } = useToast()
  const utils = trpc.useContext()
  const [showHistory, setShowHistory] = useState(false)
  const [quickAdjustments, setQuickAdjustments] = useState<QuickAdjustment[]>([])
  const [cookingNotes, setCookingNotes] = useState<string>('')
  const [editingItem, setEditingItem] = useState<{ type: string; index: number } | null>(null)
  const [tempAdjustment, setTempAdjustment] = useState('')
  const [showSaveAdjustments, setShowSaveAdjustments] = useState(false)
  const [cookingSessionId, setCookingSessionId] = useState<string | null>(null)

  const finishSession = trpc.recipe.finishSession.useMutation({
    onSuccess: () => {
      utils.recipe.getCookingHistory.invalidate()
      utils.recipe.getCurrentCookingSession.invalidate()
      toast({
        title: "Success",
        description: "Cooking session completed!",
      })
      onClose()
    },
    onError: (error) => {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to complete cooking session",
      })
    },
  })

  const recordCooking = trpc.recipe.recordCooking.useMutation({
    onSuccess: (session) => {
      setCookingSessionId(session.id)
      utils.recipe.getCookingHistory.invalidate()
      utils.recipe.getCurrentCookingSession.invalidate()
      toast({
        title: "Success",
        description: "Cooking session started!",
      })
    },
    onError: (error) => {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to record cooking session",
      })
    },
  })

  const saveCookingNotes = trpc.recipe.saveCookingNotes.useMutation({
    onSuccess: (data) => {
      console.log('Notes saved successfully:', data)
      toast({
        title: "Success",
        description: "Notes saved",
      })
    },
    onError: (error) => {
      console.error('Error saving notes:', error)
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to save notes",
      })
    },
  })

  const saveAdjustments = trpc.recipe.saveRecipeAdjustments.useMutation({
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Recipe updated with your adjustments",
      })
      setShowSaveAdjustments(false)
      utils.recipe.getById.invalidate(recipeId)
    },
    onError: () => {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update recipe",
      })
    },
  })

  useEffect(() => {
    if (recipe) {
      try {
        // Parse ingredients
        let parsedIngredients: RecipeIngredient[] = []
        try {
          const ingredientsData = recipe.ingredients
          console.log('Raw ingredients data:', ingredientsData)
          const parsedData = JSON.parse(ingredientsData)
          console.log('Parsed ingredients data:', parsedData)

          if (!Array.isArray(parsedData)) {
            throw new Error('Ingredients data is not an array')
          }

          parsedIngredients = parsedData.map(ing => {
            if (!ing || typeof ing !== 'object') {
              throw new Error('Invalid ingredient format')
            }

            return {
              name: String(ing.name || ''),
              amount: Number(ing.amount || 0),
              unit: String(ing.unit || ''),
              checked: false,
            }
          })
        } catch (e) {
          console.error('Error parsing ingredients:', e)
          throw new Error(`Invalid ingredients format: ${e instanceof Error ? e.message : 'unknown error'}`)
        }
        setIngredients(parsedIngredients)

        // Parse instructions
        let parsedInstructions: string[] = []
        try {
          const instructionsData = recipe.instructions
          console.log('Raw instructions data:', instructionsData)
          const parsedData = JSON.parse(instructionsData)
          console.log('Parsed instructions data:', parsedData)

          if (!Array.isArray(parsedData)) {
            throw new Error('Instructions data is not an array')
          }

          parsedInstructions = parsedData.map(inst => {
            if (typeof inst !== 'string') {
              throw new Error('Invalid instruction format')
            }
            return inst
          })
        } catch (e) {
          console.error('Error parsing instructions:', e)
          throw new Error(`Invalid instructions format: ${e instanceof Error ? e.message : 'unknown error'}`)
        }
        setInstructions(parsedInstructions)
      } catch (error) {
        console.error('Error parsing recipe data:', error)
        toast({
          variant: "destructive",
          title: "Error",
          description: error instanceof Error ? error.message : "Failed to parse recipe data",
        })
      }
    }
  }, [recipe, toast])

  useEffect(() => {
    const timerInterval = setInterval(() => {
      setTimers(prevTimers =>
        prevTimers.map(timer => {
          if (timer.isRunning && timer.timeLeft > 0) {
            const newTimeLeft = timer.timeLeft - 1
            if (newTimeLeft === 0) {
              toast({
                title: "Timer Complete",
                description: `${timer.name} is done!`,
              })
            }
            return { ...timer, timeLeft: newTimeLeft }
          }
          return timer
        })
      )
    }, 1000)

    return () => clearInterval(timerInterval)
  }, [toast])

  const addTimer = () => {
    if (newTimerDuration <= 0) {
      toast({
        variant: "destructive",
        title: "Invalid Duration",
        description: "Timer duration must be greater than 0",
      })
      return
    }

    const timerName = newTimerName.trim() || `${newTimerDuration} min timer`
    const newTimer: Timer = {
      id: Math.random().toString(36).substr(2, 9),
      name: timerName,
      duration: newTimerDuration * 60,
      timeLeft: newTimerDuration * 60,
      isRunning: true,
    }
    setTimers(prev => [...prev, newTimer])
    setNewTimerName("")
    setNewTimerDuration(5)
  }

  const toggleTimer = (id: string) => {
    setTimers(prev =>
      prev.map(timer =>
        timer.id === id ? { ...timer, isRunning: !timer.isRunning } : timer
      )
    )
  }

  const removeTimer = (id: string) => {
    setTimers(prev => prev.filter(timer => timer.id !== id))
  }

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`
  }

  const toggleIngredient = (index: number) => {
    setIngredients(prev =>
      prev.map((ing, i) =>
        i === index ? { ...ing, checked: !ing.checked } : ing
      )
    )
  }

  const adjustServings = (increment: boolean) => {
    setServingMultiplier(prev => {
      const newValue = increment ? prev + 0.5 : prev - 0.5
      return Math.max(0.5, newValue)
    })
  }

  const finishCooking = async () => {
    if (cookingSessionId && recipe) {
      try {
        await finishSession.mutateAsync({
          sessionId: cookingSessionId,
          actualTime: Math.round((new Date().getTime() - startTime.getTime()) / 60000),
          servingsCooked: Math.round(recipe.servings * servingMultiplier),
        })
      } catch (error) {
        console.error('Error finishing cooking session:', error)
      }
    }
  }

  const totalTimesCookedMessage = cookingHistory.length > 0
    ? `Cooked ${cookingHistory.length} ${cookingHistory.length === 1 ? 'time' : 'times'}`
    : 'Never cooked before'

  const lastCookedMessage = cookingHistory.length > 0
    ? `Last cooked ${formatDistanceToNow(new Date(cookingHistory[0].completedAt))} ago`
    : null

  // Start cooking session when component mounts
  useEffect(() => {
    const startCookingSession = async () => {
      if (!recipe) return

      try {
        const session = await recordCooking.mutateAsync({
          recipeId,
          startedAt: new Date(),
          servingsCooked: recipe.servings,
        })
        setCookingSessionId(session.id)
        
        // Load existing notes if any
        if (session.notes) {
          setCookingNotes(session.notes)
        }
      } catch (error) {
        console.error('Failed to start cooking session:', error)
        toast({
          variant: "destructive",
          title: "Error",
          description: "Failed to start cooking session",
        })
      }
    }

    if (recipe && !currentSession && !cookingSessionId) {
      startCookingSession()
    } else if (currentSession && !cookingSessionId) {
      setCookingSessionId(currentSession.id)
      if (currentSession.notes) {
        setCookingNotes(currentSession.notes)
      }
    }
  }, [recipe, currentSession, cookingSessionId])

  // Auto-save cooking notes with debounce
  useEffect(() => {
    if (!cookingNotes.trim() || !cookingSessionId) return

    const saveTimeout = setTimeout(() => {
      saveCookingNotes.mutate({
        recipeId,
        cookingSessionId,
        notes: cookingNotes,
      })
    }, 1000)

    return () => clearTimeout(saveTimeout)
  }, [cookingNotes, cookingSessionId])

  // Function to start editing an item
  const handleStartEdit = (type: 'ingredient' | 'instruction', index: number) => {
    setEditingItem({ type, index })
    const item = type === 'ingredient' 
      ? `${scaledIngredients[index].amount} ${scaledIngredients[index].unit} ${scaledIngredients[index].name}`
      : instructions[index]
    setTempAdjustment(item)
  }

  // Function to save adjustment
  const saveAdjustment = () => {
    if (!editingItem || !tempAdjustment.trim()) {
      setEditingItem(null)
      setTempAdjustment('')
      return
    }

    const originalValue = editingItem.type === 'ingredient'
      ? `${scaledIngredients[editingItem.index].amount} ${scaledIngredients[editingItem.index].unit} ${scaledIngredients[editingItem.index].name}`
      : instructions[editingItem.index]

    setQuickAdjustments(prev => {
      const existing = prev.findIndex(
        adj => adj.type === editingItem.type && adj.index === editingItem.index
      )

      const newAdjustment = {
        type: editingItem.type as 'ingredient' | 'instruction',
        index: editingItem.index,
        originalValue,
        adjustedValue: tempAdjustment.trim()
      }

      if (existing >= 0) {
        const newAdjustments = [...prev]
        newAdjustments[existing] = newAdjustment
        return newAdjustments
      }

      return [...prev, newAdjustment]
    })

    // Update the displayed value
    if (editingItem.type === 'instruction') {
      setInstructions(prev => {
        const newInstructions = [...prev]
        newInstructions[editingItem.index] = tempAdjustment.trim()
        return newInstructions
      })
    }
    // For ingredients, we'll show the adjustment below the original

    setEditingItem(null)
    setTempAdjustment('')
    toast({
      title: "Adjustment Saved",
      description: "Your modification has been saved for this cooking session.",
    })
  }

  // Get adjustment for an item
  const getAdjustment = (type: 'ingredient' | 'instruction', index: number) => {
    return quickAdjustments.find(adj => adj.type === type && adj.index === index)
  }

  // Function to save adjustments back to recipe
  const handleSaveToRecipe = () => {
    if (quickAdjustments.length === 0) {
      toast({
        variant: "destructive",
        title: "No Adjustments",
        description: "You haven't made any adjustments to save",
      })
      return
    }

    setShowSaveAdjustments(true)
  }

  // Image error handler
  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>) => {
    if (recipe?.imageUrl) {
      console.error('Image failed to load:', recipe.imageUrl);
    }
    e.currentTarget.style.display = 'none';
  };

  // History section
  const renderHistory = () => {
    if (!showHistory || cookingHistory.length === 0) return null;

    return (
      <div className="mt-4 p-4 bg-muted/50 rounded-lg">
        <h3 className="text-sm font-medium mb-2">Cooking History</h3>
        <div className="space-y-2">
          {cookingHistory.slice(0, 5).map((history) => (
            <div key={history.id} className="flex items-center justify-between text-sm">
              <div className="flex items-center gap-2">
                <span>{format(new Date(history.completedAt), 'MMM d, yyyy')}</span>
              </div>
            </div>
          ))}
          {cookingHistory.length > 5 && (
            <p className="text-xs text-muted-foreground text-center mt-2">
              + {cookingHistory.length - 5} more times
            </p>
          )}
        </div>
      </div>
    );
  };

  if (error) {
    return (
      <div className="fixed inset-0 bg-background z-50 flex items-center justify-center">
        <div className="text-center space-y-4">
          <h2 className="text-2xl font-bold text-destructive">Error Loading Recipe</h2>
          <p className="text-muted-foreground">{error.message}</p>
          <Button onClick={onClose}>Go Back</Button>
        </div>
      </div>
    )
  }

  if (isLoading || !recipe) {
    return (
      <div className="fixed inset-0 bg-background z-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4"></div>
          <p>Loading recipe...</p>
        </div>
      </div>
    )
  }

  const scaledIngredients = ingredients.map(ing => ({
    ...ing,
    amount: ing.amount * servingMultiplier,
  }))

  return (
    <div className="fixed inset-0 bg-background z-50 overflow-auto">
      <div className="container mx-auto p-4 max-w-6xl">
        {/* Recipe Header */}
        <div className="flex items-start justify-between mb-6">
          <div>
            <h2 className="text-2xl font-semibold">{recipe.title}</h2>
            <div className="flex items-center gap-2 text-sm text-muted-foreground mt-1">
              <span>{totalTimesCookedMessage}</span>
              {lastCookedMessage && (
                <>
                  <span>•</span>
                  <span>{lastCookedMessage}</span>
                </>
              )}
            </div>
          </div>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-6 w-6" />
          </Button>
        </div>

        {/* Recipe Image */}
        {recipe.imageUrl && (
          <div className="relative w-full h-[300px] rounded-lg overflow-hidden mb-8">
            <img
              src={recipe.imageUrl}
              alt={recipe.title}
              className="w-full h-full object-cover"
              onError={handleImageError}
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" />
          </div>
        )}

        {/* Recipe Stats */}
        <div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground mb-8">
          <div className="flex items-center gap-2">
            <Clock className="h-4 w-4" />
            <span>Prep: {recipe.prepTime}min</span>
          </div>
          <div className="flex items-center gap-2">
            <Flame className="h-4 w-4" />
            <span>Cook: {recipe.cookTime}min</span>
          </div>
          <div className="flex items-center gap-2">
            <GaugeCircle className="h-4 w-4" />
            <span>Difficulty: {recipe.difficulty}</span>
          </div>
          {lastCookedMessage && (
            <Button 
              variant="ghost" 
              size="sm" 
              className="text-xs"
              onClick={() => setShowHistory(!showHistory)}
            >
              {showHistory ? <ChevronUp className="h-3 w-3 mr-1" /> : <ChevronDown className="h-3 w-3 mr-1" />}
              View History
            </Button>
          )}
        </div>

        {/* Cooking History Dropdown */}
        {renderHistory()}

        {/* Main Content */}
        <div className="grid lg:grid-cols-[350px,1fr] gap-8">
          {/* Left Column - Ingredients & Tools */}
          <div className="space-y-6">
            {/* Ingredients */}
            <div className="bg-card rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Ingredients</h2>
              <div className="mb-6">
                <label className="block text-sm mb-2">Servings</label>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => adjustServings(false)}
                    disabled={servingMultiplier <= 0.5}
                  >
                    <Minus className="h-4 w-4" />
                  </Button>
                  <div className="flex-1 text-center">
                    <span className="text-2xl font-semibold">
                      {Math.round(recipe.servings * servingMultiplier)}
                    </span>
                    <span className="text-sm text-muted-foreground ml-2">
                      (Original: {recipe.servings})
                    </span>
                  </div>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => adjustServings(true)}
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <ul className="space-y-3">
                {scaledIngredients.map((ing, index) => (
                  <li key={index} className="flex flex-col gap-2">
                    <div className="flex items-center gap-3 p-2 rounded hover:bg-muted/50 transition-colors">
                      <input
                        type="checkbox"
                        checked={ing.checked}
                        onChange={() => toggleIngredient(index)}
                        className="h-5 w-5"
                      />
                      <span className={ing.checked ? "line-through text-muted-foreground" : ""}>
                        {ing.amount.toFixed(1)} {ing.unit} {ing.name}
                      </span>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="ml-auto h-8 w-8"
                        onClick={() => handleStartEdit('ingredient', index)}
                      >
                        <PencilLine className="h-4 w-4" />
                      </Button>
                    </div>
                    {getAdjustment('ingredient', index) && (
                      <div className="ml-8 text-sm bg-primary/5 p-2 rounded border border-primary/10">
                        Adjusted: {getAdjustment('ingredient', index)?.adjustedValue}
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            </div>

            {/* Cooking Notes */}
            <div className="bg-card rounded-lg p-6">
              <h2 className="text-lg font-semibold mb-2">Cooking Notes</h2>
              <Textarea
                value={cookingNotes}
                onChange={(e) => setCookingNotes(e.target.value)}
                placeholder="Add notes about your cooking experience (auto-saves while typing)..."
                className="min-h-[100px]"
              />
            </div>

            {/* Timers */}
            <div className="bg-card rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Timers</h2>
              <div className="space-y-4">
                <div className="flex gap-2 mb-4">
                  {QUICK_TIMERS.map((timer) => (
                    <Button
                      key={timer.duration}
                      variant="outline"
                      onClick={() => {
                        const newTimer: Timer = {
                          id: Math.random().toString(36).substr(2, 9),
                          name: `${timer.duration} min timer`,
                          duration: timer.duration * 60,
                          timeLeft: timer.duration * 60,
                          isRunning: true,
                        };
                        setTimers(prev => [...prev, newTimer]);
                        toast({
                          title: "Timer Added",
                          description: `Added ${timer.duration} minute timer`,
                        });
                      }}
                    >
                      {timer.duration} min
                    </Button>
                  ))}
                </div>
                <div className="grid grid-cols-[1fr,auto] gap-2">
                  <div className="space-y-2">
                    <Input
                      placeholder="Timer name"
                      value={newTimerName}
                      onChange={(e) => setNewTimerName(e.target.value)}
                    />
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => setNewTimerDuration(prev => Math.max(1, prev - 1))}
                        disabled={newTimerDuration <= 1}
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                      <div className="flex-1 text-center">
                        <span className="text-2xl font-semibold">
                          {newTimerDuration}
                        </span>
                        <span className="text-sm text-muted-foreground ml-2">
                          minutes
                        </span>
                      </div>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => setNewTimerDuration(prev => prev + 1)}
                      >
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                  <Button onClick={addTimer} className="h-full">
                    <TimerIcon className="h-4 w-4 mr-2" />
                    Add
                  </Button>
                </div>
                <div className="space-y-2">
                  {timers.map((timer) => (
                    <div
                      key={timer.id}
                      className="flex items-center justify-between bg-muted p-3 rounded-lg"
                    >
                      <div className="flex flex-col">
                        <span className="font-medium">{timer.name}</span>
                        <span className="text-sm text-muted-foreground">
                          {formatTime(timer.timeLeft)}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => toggleTimer(timer.id)}
                        >
                          {timer.isRunning ? (
                            <Pause className="h-4 w-4" />
                          ) : (
                            <Play className="h-4 w-4" />
                          )}
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => removeTimer(timer.id)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Instructions */}
          <div className="space-y-6">
            <div className="bg-card rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Instructions</h2>
              <div className="space-y-8">
                {instructions.map((step, index) => (
                  <div
                    key={index}
                    className={`space-y-2 ${
                      index === currentStep ? "bg-primary/10" : "hover:bg-muted/50"
                    } rounded transition-colors`}
                  >
                    <div className="p-4">
                      <div className="flex items-start gap-4">
                        <span className="font-mono text-lg font-bold">
                          {index + 1}
                        </span>
                        <p className="flex-1">{step}</p>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8"
                          onClick={() => handleStartEdit('instruction', index)}
                        >
                          <PencilLine className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="flex justify-between mt-8">
                <Button
                  variant="outline"
                  onClick={() => setCurrentStep((prev) => Math.max(0, prev - 1))}
                  disabled={currentStep === 0}
                >
                  <ChevronLeft className="h-4 w-4 mr-2" />
                  Previous
                </Button>
                {currentStep === instructions.length - 1 ? (
                  <Button onClick={finishCooking}>
                    Finish Cooking
                  </Button>
                ) : (
                  <Button
                    onClick={() =>
                      setCurrentStep((prev) =>
                        Math.min(instructions.length - 1, prev + 1)
                      )
                    }
                  >
                    Next
                    <ChevronRight className="h-4 w-4 ml-2" />
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Edit Dialog */}
        {editingItem && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
            <div className="bg-card rounded-lg p-6 max-w-md w-full space-y-4">
              <h3 className="text-lg font-semibold">
                Adjust {editingItem.type === 'ingredient' ? 'Ingredient' : 'Step'} {editingItem.index + 1}
              </h3>
              {editingItem.type === 'ingredient' ? (
                <Input
                  value={tempAdjustment}
                  onChange={(e) => setTempAdjustment(e.target.value)}
                  placeholder="Adjust ingredient..."
                  autoFocus
                />
              ) : (
                <Textarea
                  value={tempAdjustment}
                  onChange={(e) => setTempAdjustment(e.target.value)}
                  placeholder="Adjust instruction step..."
                  className="min-h-[100px]"
                  autoFocus
                />
              )}
              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  onClick={() => {
                    setEditingItem(null);
                    setTempAdjustment('');
                  }}
                >
                  Cancel
                </Button>
                <Button onClick={saveAdjustment}>
                  <Check className="h-4 w-4 mr-2" />
                  Save Adjustment
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Add Save Adjustments button when there are adjustments */}
        {quickAdjustments.length > 0 && (
          <div className="fixed bottom-4 right-4">
            <Button
              onClick={handleSaveToRecipe}
              className="shadow-lg"
            >
              <Save className="h-4 w-4 mr-2" />
              Save Adjustments to Recipe
            </Button>
          </div>
        )}

        {/* Save Adjustments Confirmation Dialog */}
        {showSaveAdjustments && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
            <div className="bg-card rounded-lg p-6 max-w-lg w-full space-y-4">
              <h3 className="text-lg font-semibold">
                Save Adjustments to Recipe
              </h3>
              <div className="space-y-4">
                <p className="text-muted-foreground">
                  This will update the original recipe with your adjustments. Are you sure you want to proceed?
                </p>
                <div className="space-y-2">
                  <h4 className="font-medium">Changes to be saved:</h4>
                  {quickAdjustments.map((adj, i) => (
                    <div key={i} className="text-sm space-y-1">
                      <div className="font-medium">
                        {adj.type === 'ingredient' ? 'Ingredient' : 'Step'} {adj.index + 1}:
                      </div>
                      <div className="text-muted-foreground pl-4">
                        From: {adj.originalValue}
                      </div>
                      <div className="text-primary pl-4">
                        To: {adj.adjustedValue}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  onClick={() => setShowSaveAdjustments(false)}
                >
                  Cancel
                </Button>
                <Button
                  onClick={() => saveAdjustments.mutate({
                    recipeId,
                    adjustments: quickAdjustments,
                  })}
                  disabled={saveAdjustments.isLoading}
                >
                  {saveAdjustments.isLoading ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Saving...
                    </>
                  ) : (
                    <>
                      <Check className="h-4 w-4 mr-2" />
                      Save to Recipe
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 